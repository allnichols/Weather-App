{"version":3,"sources":["components/SideWeather/SideWeather.module.css","components/Forecast/Forecast.module.css","components/CurrentWeather/CurrentWeather.js","components/SideWeather/SideWeather.js","components/Forecast/Forecast.js","hoc/Auxillary.js","containers/Weather/Weather.js","App.js","serviceWorker.js","index.js","components/CurrentWeather/MainData.module.css","containers/Weather/Weather.module.css"],"names":["module","exports","List","Forecast","currentWeather","props","react_default","a","createElement","className","styles","MainCard","LocationTemp","city","state","description","Temp","src","icon","alt","temp","sideWeather","precipitation","humidity","wind","forecast","dayOfWeek","date","printDay","Date","toLocaleDateString","weekday","onClick","clicked","Math","round","high","low","aux","children","Weather","location","condition","forecastClickedHandler","obj1","obj2","_this","setState","console","log","_this2","this","axios","get","then","response","data","current","forecastday","_this3","map","day","weatherNumbers","temp_f","avgtemp_f","precip_in","totalprecip_in","avghumidity","wind_mph","maxwind_mph","newCondition","text","key","date_epoch","mintemp_f","maxtemp_f","Auxillary","ContainerCurrent","CurrentWeather","name","region","SideWeather","ContainerForecast","Component","App","containers_Weather_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.478e1b19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"SideWeather_List__XirTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Forecast\":\"Forecast_Forecast__2SNEc\"};","import React from 'react';\r\nimport styles from './MainData.module.css';\r\n\r\n\r\n\r\nconst currentWeather = (props) => {\r\n\r\n  return(\r\n\r\n    <div className={styles.MainCard}>\r\n\r\n      <div className={styles.LocationTemp}>\r\n          <p>{props.city}, {props.state}</p>\r\n\r\n          <p>{props.description}</p>\r\n        <div className={styles.Temp}>\r\n          <img src={props.icon} alt=\"icon\"/>\r\n          <h1>{props.temp} <span>°F</span></h1>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default currentWeather;\r\n","import React from 'react';\r\nimport styles from './SideWeather.module.css';\r\n\r\nconst sideWeather = (props) => {\r\n  return(\r\n    <div className={styles.List}>\r\n      <ul>\r\n        <li>Precipitation: <span>{props.precipitation}</span></li>\r\n        <li>Humidity: <span>{props.humidity}%</span></li>\r\n        <li>Wind: <span>{props.wind}mph</span></li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default sideWeather;\r\n","import React from 'react';\r\nimport styles from './Forecast.module.css';\r\n\r\n\r\nconst forecast = (props) => {\r\n\r\n  const options = {weekday:'short'}\r\n  const dayOfWeek = props.date;\r\n  const printDay = new Date(dayOfWeek).toLocaleDateString('en-us', options);\r\n\r\n  return(\r\n\r\n    <div className={styles.Forecast} onClick={props.clicked}>\r\n      <p>{printDay}</p>\r\n      <img src={props.icon} alt=\"icon\"/>\r\n      <p>{ Math.round( props.high)}°</p>\r\n      <p>{ Math.round( props.low )}°</p>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default forecast;\r\n","const aux = (props) => props.children;\r\n\r\nexport default aux;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Weather.module.css';\r\nimport CurrentWeather from '../../components/CurrentWeather/CurrentWeather';\r\nimport SideWeather from '../../components/SideWeather/SideWeather';\r\nimport Forecast from '../../components/Forecast/Forecast';\r\nimport Auxillary from '../../hoc/Auxillary';\r\n\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\n\r\nclass Weather extends Component {\r\n\r\n  state = {\r\n    location: {},\r\n    currentWeather: {},\r\n    condition: {},\r\n    forecast: []\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    axios.get('https://api.apixu.com/v1/forecast.json?key=' + API_KEY + '&q=Houston&days=7')\r\n    .then(response => {\r\n      this.setState({\r\n        currentWeather: response.data.current,\r\n        location: response.data.location,\r\n        condition: response.data.current.condition,\r\n        forecast: response.data.forecast.forecastday\r\n       })\r\n      console.log(response.data)\r\n    })\r\n  }\r\n\r\n  forecastClickedHandler = ( obj1, obj2 ) =>{\r\n\r\n    this.setState({\r\n      currentWeather: obj1,\r\n      condition: obj2\r\n    });\r\n      console.log('clicked');\r\n  }\r\n\r\n\r\n  render(){\r\n    let forecast = this.state.forecast.map(day => {\r\n        let weatherNumbers = {\r\n          temp_f: day.day.avgtemp_f,\r\n          precip_in: day.day.totalprecip_in,\r\n          humidity: day.day.avghumidity,\r\n          wind_mph: day.day.maxwind_mph}\r\n\r\n        let newCondition = { icon: day.day.condition.icon, text:day.day.condition.text  }\r\n\r\n      return(\r\n        <Forecast\r\n        key={day.date_epoch}\r\n        date={day.date}\r\n        icon={day.day.condition.icon}\r\n        low={day.day.mintemp_f}\r\n        high={day.day.maxtemp_f}\r\n        clicked={()=> this.forecastClickedHandler(weatherNumbers, newCondition) }\r\n      />\r\n    )\r\n    });\r\n\r\n    return(\r\n      <Auxillary>\r\n\r\n        <div className={styles.ContainerCurrent}>\r\n          <CurrentWeather\r\n            city={this.state.location.name}\r\n            state={this.state.location.region}\r\n            temp={ Math.round( this.state.currentWeather.temp_f ) }\r\n            icon={this.state.condition.icon}\r\n            description={this.state.condition.text}\r\n          />\r\n          <SideWeather\r\n           precipitation={this.state.currentWeather.precip_in}\r\n           humidity={this.state.currentWeather.humidity}\r\n           wind={this.state.currentWeather.wind_mph}\r\n          />\r\n        </div>\r\n        <div className={styles.ContainerForecast}>\r\n          {forecast}\r\n          </div>\r\n      </Auxillary>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Weather from './containers/Weather/Weather';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Weather/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainCard\":\"MainData_MainCard__15Pad\",\"LocationTemp\":\"MainData_LocationTemp__1vZqx\",\"Temp\":\"MainData_Temp__3MQUX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContainerCurrent\":\"Weather_ContainerCurrent__2hGEX\",\"ContainerForecast\":\"Weather_ContainerForecast__x_D4b\"};"],"sourceRoot":""}